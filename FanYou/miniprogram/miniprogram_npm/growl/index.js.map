{"version":3,"sources":["growl.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\n// Growl - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nconst spawn = require('child_process').spawn;\nconst fs = require('fs');\nconst path = require('path');\nconst os = require('os');\n\nconst exists = fs.existsSync || path.existsSync;\nlet cmd;\n\nfunction which(name) {\n  const paths = process.env.PATH.split(':');\n  let loc;\n\n  for (let i = 0, len = paths.length; i < len; i += 1) {\n    loc = path.join(paths[i], name);\n    if (exists(loc)) return loc;\n  }\n  return false;\n}\n\nfunction setupCmd() {\n  switch (os.type()) {\n    case 'Darwin':\n      if (which('terminal-notifier')) {\n        cmd = {\n          type: 'Darwin-NotificationCenter',\n          pkg: 'terminal-notifier',\n          msg: '-message',\n          title: '-title',\n          subtitle: '-subtitle',\n          icon: '-appIcon',\n          sound: '-sound',\n          url: '-open',\n          priority: {\n            cmd: '-execute',\n            range: [],\n          },\n        };\n      } else {\n        cmd = {\n          type: 'Darwin-Growl',\n          pkg: 'growlnotify',\n          msg: '-m',\n          sticky: '--sticky',\n          url: '--url',\n          priority: {\n            cmd: '--priority',\n            range: [\n              -2,\n              -1,\n              0,\n              1,\n              2,\n              'Very Low',\n              'Moderate',\n              'Normal',\n              'High',\n              'Emergency',\n            ],\n          },\n        };\n      }\n      break;\n    case 'Linux':\n      if (which('growl')) {\n        cmd = {\n          type: 'Linux-Growl',\n          pkg: 'growl',\n          msg: '-m',\n          title: '-title',\n          subtitle: '-subtitle',\n          host: {\n            cmd: '-H',\n            hostname: '192.168.33.1',\n          },\n        };\n      } else {\n        cmd = {\n          type: 'Linux',\n          pkg: 'notify-send',\n          msg: '',\n          sticky: '-t 0',\n          icon: '-i',\n          priority: {\n            cmd: '-u',\n            range: [\n              'low',\n              'normal',\n              'critical',\n            ],\n          },\n        };\n      }\n      break;\n    case 'Windows_NT':\n      cmd = {\n        type: 'Windows',\n        pkg: 'growlnotify',\n        msg: '',\n        sticky: '/s:true',\n        title: '/t:',\n        icon: '/i:',\n        url: '/cu:',\n        priority: {\n          cmd: '/p:',\n          range: [\n            -2,\n            -1,\n            0,\n            1,\n            2,\n          ],\n        },\n      };\n      break;\n    default:\n      break;\n  }\n}\n\n\n/**\n * Send growl notification _msg_ with _options_.\n *\n * Options:\n *\n *  - title   Notification title\n *  - sticky  Make the notification stick (defaults to false)\n *  - priority  Specify an int or named key (default is 0)\n *  - name    Application name (defaults to growlnotify)\n *  - sound   Sound efect ( in OSx defined in preferences -> sound -> effects)\n *            works only in OSX > 10.8x\n *  - image\n *    - path to an icon sets --iconpath\n *    - path to an image sets --image\n *    - capitalized word sets --appIcon\n *    - filename uses extname as --icon\n *    - otherwise treated as --icon\n *\n * Examples:\n *\n *   growl('New email')\n *   growl('5 new emails', { title: 'Thunderbird' })\n *   growl('5 new emails', { title: 'Thunderbird', sound: 'Purr' })\n *   growl('Email sent', function(){\n *     // ... notification sent\n *   })\n *\n * @param {string} msg\n * @param {object} opts\n * @param {function} callback\n * @api public\n */\n\nfunction growl(msg, opts, callback) {\n  let image;\n  const options = opts || {};\n  const fn = callback || function noop() {};\n\n  setupCmd();\n\n  if (options.exec) {\n    cmd = {\n      type: 'Custom',\n      pkg: options.exec,\n      range: [],\n    };\n  }\n\n  // noop\n  if (!cmd) {\n    fn(new Error('growl not supported on this platform'));\n    return;\n  }\n  const args = [cmd.pkg];\n\n  // image\n  if (image || options.image) {\n    image = options.image;\n    switch (cmd.type) {\n      case 'Darwin-Growl': {\n        let flag;\n        const ext = path.extname(image).substr(1);\n        flag = ext === 'icns' && 'iconpath';\n        flag = flag || (/^[A-Z]/.test(image) && 'appIcon');\n        flag = flag || (/^png|gif|jpe?g$/.test(ext) && 'image');\n        flag = flag || (ext && (image = ext) && 'icon');\n        flag = flag || 'icon';\n        args.push(`--${flag}`, image);\n        break;\n      }\n      case 'Darwin-NotificationCenter':\n        args.push(cmd.icon, image);\n        break;\n      case 'Linux':\n        args.push(cmd.icon, image);\n        // libnotify defaults to sticky, set a hint for transient notifications\n        if (!options.sticky) args.push('--hint=int:transient:1');\n        break;\n      case 'Windows':\n        args.push(cmd.icon + image);\n        break;\n      default:\n        break;\n    }\n  }\n\n  // sticky\n  if (options.sticky) args.push(cmd.sticky);\n\n  // priority\n  if (options.priority) {\n    const priority = `${options.priority}`;\n    const checkindexOf = cmd.priority.range.indexOf(priority);\n    if (checkindexOf > -1) {\n      args.push(cmd.priority, options.priority);\n    }\n  }\n\n  // sound\n  if (options.sound && cmd.type === 'Darwin-NotificationCenter') {\n    args.push(cmd.sound, options.sound);\n  }\n\n  // name\n  if (options.name && cmd.type === 'Darwin-Growl') {\n    args.push('--name', options.name);\n  }\n\n  switch (cmd.type) {\n    case 'Darwin-Growl':\n      args.push(cmd.msg);\n      args.push(msg.replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(options.title);\n      if (options.url) {\n        args.push(cmd.url);\n        args.push(options.url);\n      }\n      break;\n    case 'Darwin-NotificationCenter': {\n      args.push(cmd.msg);\n      const stringifiedMsg = msg;\n      const escapedMsg = stringifiedMsg.replace(/\\\\n/g, '\\n');\n      args.push(escapedMsg);\n      if (options.title) {\n        args.push(cmd.title);\n        args.push(options.title);\n      }\n      if (options.subtitle) {\n        args.push(cmd.subtitle);\n        args.push(options.subtitle);\n      }\n      if (options.url) {\n        args.push(cmd.url);\n        args.push(options.url);\n      }\n      break;\n    }\n    case 'Linux-Growl':\n      args.push(cmd.msg);\n      args.push(msg.replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(options.title);\n      if (cmd.host) {\n        args.push(cmd.host.cmd, cmd.host.hostname);\n      }\n      break;\n    case 'Linux':\n      if (options.title) {\n        args.push(options.title);\n        args.push(cmd.msg);\n        args.push(msg.replace(/\\\\n/g, '\\n'));\n      } else {\n        args.push(msg.replace(/\\\\n/g, '\\n'));\n      }\n      break;\n    case 'Windows':\n      args.push(msg.replace(/\\\\n/g, '\\n'));\n      if (options.title) args.push(cmd.title + options.title);\n      if (options.url) args.push(cmd.url + options.url);\n      break;\n    case 'Custom': {\n      const customCmd = args[0];\n      const message = options.title\n        ? `${options.title}: ${msg}`\n        : msg;\n      let command = customCmd.replace(/(^|[^%])%s/g, `$1${message}`);\n      const splitCmd = command.split(' ');\n      if (splitCmd.length > 1) {\n        command = splitCmd.shift();\n        Array.prototype.push.apply(args, splitCmd);\n      }\n      if (customCmd.indexOf('%s') < 0) {\n        args.push(message);\n      }\n      args[0] = command;\n      break;\n    }\n    default:\n      break;\n  }\n  const cmdToExec = args.shift();\n\n  const child = spawn(cmdToExec, args);\n  let stdout = '';\n  let stderr = '';\n  let error;\n\n  child.on('error', (err) => {\n    console.error('An error occured.', err);\n    error = err;\n  });\n\n  child.stdout.on('data', (data) => {\n    stdout += data;\n  });\n\n  child.stderr.on('data', (data) => {\n    stderr += data;\n  });\n\n  child.on('close', (code) => {\n    error = error || code === 0 ? null : code;\n    if (typeof fn === 'function') {\n      fn(error, stdout, stderr);\n    }\n  });\n}\n\n\n/**\n * Expose `growl`.\n */\n\nmodule.exports = growl;\n"]}